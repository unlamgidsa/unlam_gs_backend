"""
Django settings for GroundSegment project.

Generated by 'django-admin startproject' using Django 1.9.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""
import os
from django.conf.global_settings import STATICFILES_DIRS
from GroundSegment import config


DEFAULT_AUTO_FIELD='django.db.models.AutoField'
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


#APIURL = "http://127.0.0.1:8059/TlmyRawData/"
APIURL = "http://127.0.0.1:8000/TlmyRawData/"
#APIURL = "http://127.0.0.1:8051/TlmyRawData/"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.SECRET_KEY
import socket
hostname=socket.gethostname()
# SECURITY WARNING: don't run with debug turned on in production!
#Por alguna razon debug true no lee statics!!!
if os.getenv('DJANGO_ENV') == 'prod':
    DEBUG = False
    QUICKTEST = False
    
    # ...
elif (hostname=="DESKTOP-GVDAOPQ"):
    DEBUG=True
    QUICKTEST = False
    
elif(hostname=="DESKTOP-07H93MS"):
    DEBUG=True
    QUICKTEST = False
    
else:
    QUICKTEST = False
    DEBUG = False
    
ALLOWED_HOSTS = ['*']
#ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]']


GRAPH_MODELS = {
  'all_applications': True,
  'group_models': True,
  
}

EMAIL_USE_TLS = True
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_PASSWORD = 'consultar' #ver archivo de passwords
EMAIL_HOST_USER = 'mdiaegroundsegment@gmail.com' #my gmail username
EMAIL_PORT = 587
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

INSTALLED_APPS = [
    
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django_extensions',
    #python3.4 manage.py graph_models -a -o myapp_models.png
    'corsheaders',
    #web sockets
    #'channels',
    #'debug_toolbar',
    #pip install django-debug-toolbar
    #'django_celery_results',
    #'django_celery_beat',
    #'celerybeat_status',
    #'Celery',
    
    #'kombu.transport.django',
    'CODS',
    'GroundSegment',
    'API',
    'Telemetry',
    'Telecommand',
    'Calibration',
    'rest_framework',
    #Esto medio de autenticacion es indicado si apps se conectan a ip publica
    'rest_framework.authtoken',
    #'graphos',
    #'leaflet',
]

CORS_ORIGIN_ALLOW_ALL = True
ALLOWED_HOSTS = ['*']
#web sockets descomentar

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    #'debug_toolbar.middleware.DebugToolbarMiddleware',
]


ROOT_URLCONF = 'GroundSegment.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [(os.path.join(BASE_DIR, 'templates')),],
        #
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
# para archivar los mensajes
MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'

#WSGI_APPLICATION = 'wsgi.application'
#nmap 127.0.0.1 -p6000-6380 para saber si redis corre..


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases


if hostname=="ubuntu-pablo" :
    DATABASES = {
        'default': {
                    'ENGINE': 'django.db.backends.postgresql_psycopg2',
                    'NAME': 'DBGS_DEVE',
                    'USER': 'postgres',
                    'PASSWORD': 'postgres',
                    'HOST':'192.168.1.2',
                    'PORT': '5432',
                    'CONN_MAX_AGE': 100,
             },
        'production':{
                    'ENGINE': 'django.db.backends.postgresql_psycopg2',
                    #'NAME': 'DBGS_RESE',
                    'NAME': 'DBGS_PROD',
                    'USER': 'gmerkel',
                    'PASSWORD': config.DB_PASSWORD,
                    #'HOST':'104.215.89.93',
                    'HOST': '13.66.27.150',
                    #'HOST':'192.168.1.7',
                    'PORT': '5432',
                    'CONN_MAX_AGE': 600,
             },
        'development':{
                    'ENGINE': 'django.db.backends.postgresql_psycopg2',
                    #'NAME': 'DBGS_RESE',
                    'NAME': 'DBGS_PROD',
                    'USER': 'postgres',
                    'PASSWORD': 'postgres',
                    #'HOST':'104.215.89.93',
                    'HOST': '127.0.0.1',
                    #'HOST':'192.168.1.7',
                    'PORT': '5432',
                    'CONN_MAX_AGE': 600,
             },
    }
    
elif hostname=="DESKTOP-GVDAOPQ" or hostname=="pc-psoligo":
    DATABASES = {
      'default': {
                    'ENGINE': 'django.db.backends.postgresql_psycopg2',
                    'NAME': 'DBGS_DEV',
                    'USER': config.DB_USER,
                    'PASSWORD': config.DB_PASSWORD,
                    'HOST': 'localhost',
                    'PORT': '5432',
                    'CONN_MAX_AGE': 600,
                },
        'production':{
                    'ENGINE': 'django.db.backends.postgresql_psycopg2',
                    #'NAME': 'DBGS_RESE',
                    'NAME': 'DBGS_PROD',
                    'USER': config.DB_USER,
                    'PASSWORD': config.DB_PASSWORD,
                    #'HOST':'104.215.89.93',
                    'HOST': '10.10.203.4',
                    #'HOST':'192.168.1.7',
                    'PORT': '5432',
                    'CONN_MAX_AGE': 600,
             },
            }
    
elif hostname=="DESKTOP-07H93MS":
    DATABASES = {
        'default': 
        {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'dbgs_dev',
            'USER': config.DB_USER,
            'PASSWORD': config.DB_PASSWORD,
            'HOST': 'localhost',
            'PORT': '5432',
            'CONN_MAX_AGE': 100,
        }
    }

else:
      DATABASES = {
            'default': {
                        'ENGINE': 'django.db.backends.postgresql_psycopg2',
                        'NAME': 'DBGS_PROD',
                        'USER': config.SERVER_UNLAM_USER,
                        'PASSWORD': config.SERVER_UNLAM_PASSWORD,
                        'HOST': config.SERVER_UNLAM_HOST,
                        'PORT': '5432',
                        'CONN_MAX_AGE': 600,
                }
        }



# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

"""
AUTH_PASSWORD_VALIDATORS = [
    
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    
    
]

"""
# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

#STATIC_URL = '/static/'
MEDIA_URL = '/media/'
#STATIC_ROOT = os.path.join(BASE_DIR, "static")
INTERNAL_IPS = ['127.0.0.1',]




PROJECT_ROOT = os.path.normpath(os.path.dirname(__file__))
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')
STATIC_URL = '/static/'


#STATICFILES_DIRS = [
#    os.path.join(BASE_DIR, "static"),
#]

#STATICFILES_FINDERS = (
#    'django.contrib.staticfiles.finders.FileSystemFinder',
#    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#)
#Agregado por Pablo Soligo, verificar posibilidad de guardar
#en la misma base de datos para mejorar la capacidad de depuracion y control



X_FRAME_OPTIONS = 'ALLOW-FROM http://127.0.0.1:8080/'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'DEBUG',
            #'class': 'logging.FileHandler',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django.log'), #'/path/to/django/debug.log',
            'maxBytes': 16745#16777216, # 16megabytes
            #'formatter': 'verbose'
        },
                 
    },
    #'loggers': {
    #    'django.db.backends': {
    #        'level': 'DEBUG',
    #        'handlers': ['console'],
    #    }
    #}
    
    # 'loggers': {
    #     'django.db.backends': {
    #        'handlers': ['file'],
    #         'level': 'DEBUG',
    #     },
    #}
}
"""
WEB SERVICE - Permisos
"""
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.permissions.IsAuthenticated',
        #'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
        #'rest_framework.permissions.AllowAny',
    ]
}

# Redirect when login is correct.
LOGIN_REDIRECT_URL = "/home"
# Redirect when login is not correct.
LOGIN_URL = '/'

# Mapbox API Key (leaflet)
MAPBOX_KEY = os.environ.get('LH_MAPBOX_KEY')
LEAFLET_CONFIG = {
    # conf here
    #'SPATIAL_EXTENT': (0.0, 0.0,100.0, 100.0)
}


"""
Celery config
"""

#TODO Atencion: instalar celery 4.4.2! 
"""
BROKER_URL='redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_REDIS_HOST = "localhost"
CELERY_REDIS_PORT = 6379
CELERY_REDIS_DB = 0
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'

#Esto solo para DEBUGGING CORRE EN EL MISMO TREHAD
#CELERY_ALWAYS_EAGER = True
CELERY_ALWAYS_EAGER = False
#CELERY_RESULT_BACKEND = 'django-cache'
#O se puede usar la db para los results
CELERY_RESULT_BACKEND = 'django-db'
"""

#TODO: Cambiar en produccion no puede ser inmemory
#ASGI_APPLICATION = "GroundSegment.routing.application"
ASGI_APPLICATION = "asgi.application"
if DEBUG==True:
    """
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [("127.0.0.1", 6379)],
            },
             
        },
    }
    """
    
    CHANNEL_LAYERS = {
        'default':{
           # 'BACKEND' : "channels.layers.InMemoryChannelLayer", 
           "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [("127.0.0.1", 6379)],
            },
           
        }
    }
else:
    CHANNEL_LAYERS = {
        #Se requiere: sudo apt-get install redis (sudo systemctl status redis)
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [("127.0.0.1", 6379)],
            },
        },
    }




