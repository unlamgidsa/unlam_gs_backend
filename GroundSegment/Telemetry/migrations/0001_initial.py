# -*- coding: utf-8 -*-
# Generated by Django 1.11.12 on 2018-06-12 13:04
from __future__ import unicode_literals

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('GroundSegment', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Calibration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aClass', models.CharField(help_text='Clase donde se encuentra la funcion de calibracion', max_length=128, verbose_name='Clase donde se encuentra la funcion de calibracion')),
                ('aMethod', models.CharField(help_text='Metodo de calibracion', max_length=128, verbose_name='Metodo de calibracion')),
                ('subsystem', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='calibrations', to='GroundSegment.SubSystem')),
            ],
        ),
        migrations.CreateModel(
            name='Coefficient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Codigo del coeficiente', max_length=24, verbose_name='Codigo del coeficiente')),
                ('value', models.FloatField(default=0.0)),
            ],
        ),
        migrations.CreateModel(
            name='CType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default='no det', help_text='Codigo del Tipo C', max_length=48, unique=True, verbose_name='Codigo del Tipo C')),
                ('format', models.CharField(default='no det', max_length=6, verbose_name='Codigo de desempaquetado asociado')),
                ('length', models.IntegerField(default=1, verbose_name='Size of the CType')),
            ],
        ),
        migrations.CreateModel(
            name='FrameType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aid', models.IntegerField(help_text='id del tipo de paquete', unique=True, verbose_name='id del tipo de paquete')),
                ('description', models.CharField(help_text='Decripcion del tipo de paquete', max_length=100, verbose_name='Decripcion del tipo de paquete')),
            ],
        ),
        migrations.CreateModel(
            name='PacketType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Codigo del tipo de paquete', max_length=24, unique=True, verbose_name='Codigo del tipo de paquete')),
                ('description', models.CharField(help_text='Decripcion del tipo de paquete', max_length=100, verbose_name='Decripcion del tipo de paquete')),
            ],
        ),
        migrations.CreateModel(
            name='TlmyRawData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('pktdatetime', models.DateTimeField(default=datetime.datetime(1900, 1, 1, 0, 0))),
                ('data', models.BinaryField()),
                ('strdata', models.TextField(default='', verbose_name='Raw data in text format')),
                ('source', models.CharField(default='simulation', help_text='Origen del dato, tipicamente cubesat/simulacion', max_length=24, verbose_name='Origen del dato, tipicamente cubesat/simulacion')),
                ('dataLen', models.IntegerField(default=0, verbose_name='Dimension del campo data, autoguardado')),
                ('state', models.IntegerField(choices=[(0, 'PENDING'), (1, 'PROCESSED'), (2, 'ABORTED')], default=0, verbose_name='Estados, 0=Pending, 1=Processed, 2=Aborted')),
                ('abortedError', models.CharField(default='', help_text='Error exception message', max_length=256, verbose_name='Error exception message')),
                ('processedTime', models.FloatField(default=0.0, verbose_name='Tiempo en milisegundos que domoro en ser procesada')),
                ('realTime', models.BooleanField(default=True, verbose_name='Is the telemetry real time telemetry?')),
                ('tag', models.CharField(default='TEST', help_text='Free use', max_length=24, verbose_name='Free tag label')),
                ('satellite', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='rawdatas', to='GroundSegment.Satellite')),
            ],
        ),
        migrations.CreateModel(
            name='TlmyVar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default='NoDef', help_text='Codigo de la variable, se quita relacion con maestro', max_length=24, verbose_name='Codigo del tipo de variable')),
                ('rawValue', models.IntegerField(default=0)),
                ('calIValue', models.IntegerField(default=0)),
                ('calFValue', models.FloatField(default=0.0)),
                ('calBValue', models.BooleanField(default=False)),
                ('calSValue', models.CharField(default=None, help_text='Valor como string de la variable de telemetria', max_length=24, verbose_name='Valor como string de la variable de telemetria')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('tstamp', models.DateTimeField(default=datetime.datetime(1976, 10, 30, 12, 0))),
                ('outlier', models.BooleanField(default=False, verbose_name='Valor erroneo')),
            ],
        ),
        migrations.CreateModel(
            name='TlmyVarType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Codigo del satelite, ejemplo FS2017', max_length=24, unique=True, verbose_name='Codigo del tipo de variable')),
                ('description', models.CharField(help_text='Decripcion del satelite', max_length=100, verbose_name='Decripcion del tipo de variable')),
                ('limitMaxValue', models.FloatField(default=1.7976931348623157e+308, verbose_name='Maximo')),
                ('limitMinValue', models.FloatField(default=2.2250738585072014e-308, verbose_name='Minimo')),
                ('maxValue', models.FloatField(default=0, verbose_name='Maximo valor tolerable')),
                ('minValue', models.FloatField(default=0, verbose_name='Minimo valor tolerable')),
                ('lastRawValue', models.IntegerField(default=0)),
                ('lastCalIValue', models.IntegerField(default=0)),
                ('lastCalFValue', models.FloatField(default=0.0)),
                ('lastCalBValue', models.BooleanField(default=False)),
                ('lastCalSValue', models.CharField(default='No defined', help_text='Valor como string de la variable de telemetria', max_length=24, null=True, verbose_name='Valor como string de la variable de telemetria')),
                ('lastUpdate', models.DateTimeField(null=True)),
                ('varType', models.IntegerField(choices=[(0, 'Integer'), (1, 'Float'), (2, 'String'), (3, 'Boolean')], default=0, verbose_name='Tipo de dato, 0=Integer, 1=Float, 2=String')),
                ('varSubType', models.IntegerField(choices=[(0, 'Direct'), (1, 'Derived')], default=0, verbose_name='Indica si es directa o derivada 0=Directa, 1=Derivada')),
                ('position', models.IntegerField(default=0)),
                ('subPosition', models.IntegerField(default=0)),
                ('bitsLen', models.IntegerField(default=0)),
                ('alarmType', models.ForeignKey(blank=True, db_index=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tmlyVarType', to='GroundSegment.Alarm')),
                ('calibrationMethod', models.ForeignKey(blank=True, db_index=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tlmyVarTypes', to='Telemetry.Calibration')),
                ('ctype', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='tlmyVarTypes', to='Telemetry.CType')),
                ('frameType', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='tlmyVarTypes', to='Telemetry.FrameType')),
                ('satellite', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='tmlyVarType', to='GroundSegment.Satellite')),
            ],
        ),
        migrations.CreateModel(
            name='UnitOfMeasurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(help_text='Unidad de medida', max_length=10, unique=True, verbose_name='Unidad de medida')),
                ('description', models.CharField(help_text='Descripcion de Unidad de medida', max_length=124, verbose_name='Descripcion de Unidad de medida')),
            ],
        ),
        migrations.AddField(
            model_name='tlmyvartype',
            name='unitOfMeasurement',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tlmyVarTypes', to='Telemetry.UnitOfMeasurement'),
        ),
        migrations.AddField(
            model_name='tlmyvar',
            name='tlmyVarType',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tlmyVars', to='Telemetry.TlmyVarType'),
        ),
        migrations.AddField(
            model_name='coefficient',
            name='tlmyVarType',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coefficients', to='Telemetry.TlmyVarType'),
        ),
        migrations.AlterUniqueTogether(
            name='tlmyrawdata',
            unique_together=set([('pktdatetime', 'satellite')]),
        ),
        migrations.AlterIndexTogether(
            name='tlmyrawdata',
            index_together=set([('satellite', 'state')]),
        ),
    ]
